name: Deploy Hello Bot to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and lint code
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Run linter
        run: uv run ruff check .

      - name: Run formatter check
        run: uv run ruff format --check .

      - name: Validate Docker configuration
        run: |
          docker compose config
          docker compose -f docker-compose.yml config

  # Build and push Docker image
  build-and-push:
    name: Build & Push Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Deploy to VPS
  deploy:
    name: Deploy to VPS
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    concurrency:
      group: deploy-${{ github.event.inputs.environment || 'production' }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          # Create temporary directory for deployment
          mkdir -p deploy

          # Copy necessary files
          cp docker-compose.yml deploy/
          cp -r scripts deploy/
          cp .env.example deploy/

          # Create deployment script
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          echo "🚀 Starting Hello Bot deployment..."

          # Set deployment directory
          DEPLOY_DIR="$HOME/hello-bot"
          BACKUP_DIR="$HOME/hello-bot-backup"

          # Create deployment directory if it doesn't exist
          mkdir -p "$DEPLOY_DIR"

          # Backup current deployment
          if [ -d "$DEPLOY_DIR/docker-compose.yml" ]; then
            echo "📦 Creating backup..."
            rm -rf "$BACKUP_DIR" || true
            cp -r "$DEPLOY_DIR" "$BACKUP_DIR" || true
          fi

          # Copy new files
          echo "📂 Copying deployment files..."
          cp -r * "$DEPLOY_DIR/"
          cd "$DEPLOY_DIR"

          # Ensure scripts are executable
          chmod +x scripts/*.sh

          echo "✅ Files copied successfully!"
          EOF

          chmod +x deploy/deploy.sh

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deploy/*"
          target: "/tmp/hello-bot-deploy"
          strip_components: 1

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          BOT_IMAGE: ghcr.io/${{ github.repository }}:latest
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          envs: GITHUB_TOKEN,GITHUB_ACTOR,BOT_TOKEN,DB_PASSWORD,ENVIRONMENT,BOT_IMAGE
          script: |
            cd /tmp/hello-bot-deploy

            # Run deployment script
            ./deploy.sh

            # Create .env file in the final deployment directory
            cd $HOME/hello-bot
            cat > .env << EOF
            BOT_TOKEN=$BOT_TOKEN
            DB_PASSWORD=$DB_PASSWORD
            ENVIRONMENT=$ENVIRONMENT
            BOT_IMAGE=$BOT_IMAGE
            DEBUG=false
            LOG_LEVEL=INFO
            EOF

            # Now start the services with the correct .env file
            echo "🔐 Logging in to GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "📥 Pulling Docker images..."
            docker compose --profile production pull

            echo "🛑 Stopping existing services..."
            docker compose --profile production down --timeout 30 || true

            echo "🚀 Starting services..."
            docker compose --profile production up -d --remove-orphans

            echo "🔍 Waiting for services to be healthy..."
            timeout 300 docker compose --profile production exec -T bot python -c "from app.config import settings; print('Bot configuration OK')" || {
              echo "❌ Health check failed"
              docker compose --profile production logs
              exit 1
            }

            echo "🧹 Cleaning up..."
            docker system prune -f

            echo "✅ Deployment completed successfully!"
            echo "📊 Service Status:"
            docker compose --profile production ps

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            cd $HOME/hello-bot

            echo "🔍 Final verification..."

            # Check if services are running
            if ! docker compose --profile production ps | grep -q "Up"; then
              echo "❌ Services are not running properly"
              docker compose --profile production logs --tail=50
              exit 1
            fi

            # Check bot health
            if ! docker compose --profile production exec -T bot python -c "from app.config import settings; print('✅ Bot is healthy')"; then
              echo "❌ Bot health check failed"
              exit 1
            fi

            echo "✅ Deployment verification successful!"
            echo "📊 Current status:"
            docker compose --profile production ps
