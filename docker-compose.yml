# Production Docker Compose for Hello Bot
# For development, use: docker compose -f docker-compose.dev.yml up

services:
  # Database Migration Service (runs before app startup)
  migration:
    image: ${BOT_IMAGE}
    container_name: hello_bot_migration
    env_file: .env
    environment:
      DATABASE_URL: postgresql+asyncpg://hello_user:${DB_PASSWORD}@postgres:5432/hello_bot
    command: [ "alembic", "upgrade", "head" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hello_bot_network
    profiles:
      - migration
      - production
    restart: "no" # Run once and exit
  # PostgreSQL Database (Optimized for 2GB RAM VPS)
  postgres:
    image: postgres:15-alpine
    container_name: hello_bot_postgres
    environment:
      POSTGRES_DB: hello_bot
      POSTGRES_USER: hello_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      # Memory optimizations for 2GB RAM VPS
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "512MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: "0.7"
      POSTGRES_WAL_BUFFERS: "16MB"
      POSTGRES_DEFAULT_STATISTICS_TARGET: "100"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    # Resource limits for 2GB RAM system
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U hello_user -d hello_bot" ]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 10s
      start_interval: 2s
    restart: unless-stopped
    networks:
      - hello_bot_network
    profiles:
      - production

  # Telegram Bot Application (Production)
  bot:
    image: ${BOT_IMAGE}
    container_name: hello_bot_app
    env_file: .env
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://hello_user:${DB_PASSWORD}@postgres:5432/hello_bot

      # Bot configuration
      BOT_TOKEN: ${BOT_TOKEN}

      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Webhook configuration (optional)
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_SECRET_TOKEN: ${WEBHOOK_SECRET_TOKEN:-}
      WEBHOOK_HOST: "0.0.0.0"
      WEBHOOK_PORT: "8000"

      # Optimized performance settings for 2GB RAM
      DB_POOL_SIZE: ${DB_POOL_SIZE:-3}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-5}

      # Python memory optimizations
      PYTHONOPTIMIZE: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
    ports:
      - "${WEBHOOK_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    # Resource limits for bot application
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped
    networks:
      - hello_bot_network
    # Health check for the bot application
    healthcheck:
      test: [ "CMD", "python", "-c", "from app.config import settings; exit(0 if settings.bot_token else 1)" ]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 10s
      start_interval: 2s
    profiles:
      - production

volumes:
  postgres_data:
    name: hello_bot_postgres_data

networks:
  hello_bot_network:
    name: hello_bot_network
    driver: bridge
