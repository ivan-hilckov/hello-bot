# Simple Production Docker Compose for Hello Bot
# For development, use: docker compose -f docker-compose.dev.yml up

services:
  # Database Migration Service (runs before app startup)
  migration:
    image: ${BOT_IMAGE}
    container_name: ${PROJECT_NAME}_migration
    env_file: .env
    environment:
      DATABASE_URL: postgresql+asyncpg://hello_user:${DB_PASSWORD}@postgres:5432/hello_bot
    command: [ "alembic", "upgrade", "head" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bot_network
    profiles:
      - migration
      - production
    restart: "no" # Run once and exit

  # PostgreSQL Database (Simple configuration)
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME}_postgres
    environment:
      POSTGRES_DB: hello_bot
      POSTGRES_USER: hello_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    # Simple resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U hello_user -d hello_bot" ]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s
    restart: unless-stopped
    networks:
      - bot_network
    profiles:
      - production
      - migration

  # Telegram Bot Application (Production)
  bot:
    image: ${BOT_IMAGE}
    container_name: ${PROJECT_NAME}_app
    env_file: .env
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://hello_user:${DB_PASSWORD}@postgres:5432/hello_bot

      # Bot configuration
      BOT_TOKEN: ${BOT_TOKEN}

      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}

      # Webhook configuration (optional)
      WEBHOOK_URL: ${WEBHOOK_URL:-}

      # Python optimizations
      PYTHONOPTIMIZE: "1"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    # Simple resource limits for bot
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped
    networks:
      - bot_network
    # Simple health check
    healthcheck:
      test: [ "CMD", "python", "-c", "from app.config import settings; exit(0 if settings.bot_token else 1)" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - production

volumes:
  postgres_data:
    name: ${PROJECT_NAME}_postgres_data

networks:
  bot_network:
    name: ${PROJECT_NAME}_network
    driver: bridge
